const { readdir, readFile, unlink, writeFile } = require('fs/promises');
const { resolve } = require('path');
const { format } = require('prettier');
const { getConfig } = require('@lokse/core');
const prettierConfig = require('@tooling/prettier/config');

/**
 * @param {string} value
 */
function normalizeValue(value) {
    value = value.trim();

    /**
     * JSON is not valid subset of JavaScript, so we need to replace invalid characters
     * - \u2028: Line separator (https://www.compart.com/en/unicode/U+2028)
     * - \u2029: Paragraph separator (https://www.compart.com/en/unicode/U+2029)
     */
    const invalidCharsRegex = /[\u2028|\u2029]/g;

    if (value.match(invalidCharsRegex)) {
        value = value.replaceAll(invalidCharsRegex, '\n');
    }

    return value.normalize();
}

/**
 * @param {string} filePath
 */
async function formatTranslations(filePath) {
    const unparsedTranslations = await readFile(filePath, 'utf-8');
    // Use prettier to create valid stringified JSON (e.g. removes commas at last line, etc.)
    const formattedParsedTranslations = await format(unparsedTranslations, {
        ...prettierConfig,
        parser: 'json',
    });
    const parsedTranslations = JSON.parse(formattedParsedTranslations);

    const normalizedTranslations = Object.fromEntries(
        Object.entries(parsedTranslations).map(([key, value]) => [normalizeValue(key), normalizeValue(value)]),
    );

    const unformattedContent = `
    /**
     * - __This file is generated by the formatTranslations script. Do not modify it manually.__
     * - Run \`yarn localize\` to update this file.
     */
    export default ${JSON.stringify(normalizedTranslations, null, 4)} as const;`;

    const formattedContent = await format(unformattedContent, {
        ...prettierConfig,
        parser: 'typescript',
    });

    await writeFile(filePath.replace('.json', '.ts'), formattedContent, 'utf-8');

    await unlink(filePath);
}

/**
 * @param {string} dir
 */
async function getAllJsonFiles(dir) {
    const files = await readdir(dir);

    return files.filter(file => file.endsWith('.json'));
}

async function transformTranslations() {
    const root = process.cwd();
    const lokseConfig = getConfig(root);
    const translationsPath = resolve(root, lokseConfig.dir);

    console.log('\nTranslations path:', translationsPath);

    const files = await getAllJsonFiles(translationsPath);

    if (!files.length) {
        console.warn(
            `No translations as JSON files found in ${translationsDir}. Make sure to run 'lokse update' command first.\n`,
        );

        return;
    }

    console.log('Formatting translations:', files.join(', '));

    await Promise.all(files.map(file => formatTranslations(resolve(translationsPath, file))));

    console.log('Done formatting translations.');
}

module.exports = transformTranslations;
